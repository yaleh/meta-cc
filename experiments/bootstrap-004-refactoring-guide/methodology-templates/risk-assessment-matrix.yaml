# Risk Assessment Matrix for Refactoring Tasks
# Use this matrix to objectively assess task risk, value, and priority

## Assessment Framework

### 1. Value Assessment (0.0 - 1.0)

value_components:
  code_quality:
    weight: 0.30
    scoring:
      0.0: "No improvement"
      0.3: "Minor improvement (removes a few warnings)"
      0.6: "Moderate improvement (removes duplication)"
      1.0: "Major improvement (eliminates entire class of issues)"

  maintainability:
    weight: 0.30
    scoring:
      0.0: "No change or worse"
      0.3: "Slightly easier to understand"
      0.6: "Significantly easier to modify"
      1.0: "Transforms codebase clarity"

  safety:
    weight: 0.20
    scoring:
      0.0: "No safety improvement"
      0.3: "Minor test coverage increase"
      0.6: "Significant test coverage increase"
      1.0: "Eliminates entire category of bugs"

  effort_reduction:
    weight: 0.20
    scoring:
      0.0: "No future effort saved"
      0.3: "Saves a few hours annually"
      0.6: "Saves multiple days annually"
      1.0: "Eliminates entire maintenance burden"

value_calculation:
  formula: "value = Σ(component_score × weight)"
  example:
    code_quality: "0.6 × 0.30 = 0.18"
    maintainability: "0.6 × 0.30 = 0.18"
    safety: "0.3 × 0.20 = 0.06"
    effort_reduction: "0.3 × 0.20 = 0.06"
    total_value: "0.48 (MEDIUM)"

### 2. Safety Assessment (0.0 - 1.0)

safety_components:
  breakage_risk:
    weight: 0.40
    scoring:
      0.0: "Almost certain to break something"
      0.3: "High risk of breakage"
      0.6: "Low risk, well-tested"
      1.0: "Cannot break (purely additive)"

  rollback_difficulty:
    weight: 0.30
    scoring:
      0.0: "Cannot rollback (schema changes, deployed)"
      0.3: "Hard to rollback (multi-file changes)"
      0.6: "Easy to rollback (single commit)"
      1.0: "Trivial to rollback (single file)"

  test_coverage:
    weight: 0.30
    scoring:
      0.0: "No tests exist"
      0.3: "Minimal test coverage (<50%)"
      0.6: "Good test coverage (50-80%)"
      1.0: "Excellent test coverage (>80%)"

safety_calculation:
  formula: "safety = Σ(component_score × weight)"
  example:
    breakage_risk: "0.6 × 0.40 = 0.24"
    rollback_difficulty: "0.6 × 0.30 = 0.18"
    test_coverage: "1.0 × 0.30 = 0.30"
    total_safety: "0.72 (HIGH)"

### 3. Effort Assessment (0.0 - 1.0)

effort_components:
  time_estimate:
    weight: 0.40
    scoring:
      0.0: "<1 hour"
      0.3: "1-4 hours"
      0.6: "4-8 hours"
      1.0: ">8 hours"

  complexity:
    weight: 0.30
    scoring:
      0.0: "Trivial (config change)"
      0.3: "Simple (single function)"
      0.6: "Moderate (multiple functions)"
      1.0: "Complex (architectural change)"

  scope:
    weight: 0.30
    scoring:
      0.0: "Single line"
      0.3: "Single file"
      0.6: "Multiple files in one package"
      1.0: "Multiple packages or cross-cutting"

effort_calculation:
  formula: "effort = Σ(component_score × weight)"
  example:
    time_estimate: "0.3 × 0.40 = 0.12"
    complexity: "0.3 × 0.30 = 0.09"
    scope: "0.3 × 0.30 = 0.09"
    total_effort: "0.30 (LOW)"

### 4. Priority Calculation

priority_formula: "(value × safety) / effort"

priority_interpretation:
  "≥ 2.0": "P0 - Critical priority, do immediately"
  "1.0 - 2.0": "P1 - High priority, should do"
  "0.5 - 1.0": "P2 - Medium priority, nice to have"
  "< 0.5": "P3 - Low priority, skip if time-constrained"

priority_example:
  value: 0.48
  safety: 0.72
  effort: 0.30
  calculation: "(0.48 × 0.72) / 0.30 = 1.15"
  priority: "P1 (High priority)"

## Assessment Template

task_assessment:
  task_id: "TASK-XXX"
  task_name: "Task description"

  # Value Assessment
  value_assessment:
    code_quality_score: 0.6
    code_quality_weight: 0.30
    code_quality_contribution: 0.18

    maintainability_score: 0.6
    maintainability_weight: 0.30
    maintainability_contribution: 0.18

    safety_score: 0.3
    safety_weight: 0.20
    safety_contribution: 0.06

    effort_reduction_score: 0.3
    effort_reduction_weight: 0.20
    effort_reduction_contribution: 0.06

    total_value: 0.48
    value_rating: "MEDIUM"

  # Safety Assessment
  safety_assessment:
    breakage_risk_score: 0.6
    breakage_risk_weight: 0.40
    breakage_risk_contribution: 0.24

    rollback_difficulty_score: 0.6
    rollback_difficulty_weight: 0.30
    rollback_difficulty_contribution: 0.18

    test_coverage_score: 1.0
    test_coverage_weight: 0.30
    test_coverage_contribution: 0.30

    total_safety: 0.72
    safety_rating: "HIGH"

  # Effort Assessment
  effort_assessment:
    time_estimate_score: 0.3
    time_estimate_weight: 0.40
    time_estimate_contribution: 0.12

    complexity_score: 0.3
    complexity_weight: 0.30
    complexity_contribution: 0.09

    scope_score: 0.3
    scope_weight: 0.30
    scope_contribution: 0.09

    total_effort: 0.30
    effort_rating: "LOW"

  # Priority Calculation
  priority_calculation:
    formula: "(value × safety) / effort"
    value: 0.48
    safety: 0.72
    effort: 0.30
    priority_score: 1.15
    priority_level: "P1"
    recommendation: "High priority, should do"

## Batch Assessment Template

batch_assessment:
  tasks:
    - task_id: "TASK-001"
      name: "Extract helper functions"
      value: 0.60
      safety: 0.90
      effort: 0.30
      priority: 1.80
      level: "P1"

    - task_id: "TASK-002"
      name: "Split large file"
      value: 0.70
      safety: 0.40
      effort: 0.80
      priority: 0.35
      level: "P3"

    - task_id: "TASK-003"
      name: "Add validation tests"
      value: 0.50
      safety: 0.95
      effort: 0.50
      priority: 0.95
      level: "P2"

  recommended_order:
    1: "TASK-001 (P1, priority=1.80)"
    2: "TASK-003 (P2, priority=0.95)"
    3: "TASK-002 (P3, priority=0.35) - SKIP if time-constrained"

## Real-World Example: Iteration 2 Tasks

iteration_2_assessment:
  task_1_helper_extraction:
    value:
      code_quality: 0.0
      maintainability: 0.8
      safety: 0.0
      effort_reduction: 0.6
      total: 0.42
    safety:
      breakage_risk: 0.9
      rollback_difficulty: 0.9
      test_coverage: 1.0
      total: 0.93
    effort:
      time: 0.2
      complexity: 0.3
      scope: 0.3
      total: 0.27
    priority: "(0.42 × 0.93) / 0.27 = 1.45"
    level: "P1"
    actual_outcome: "COMPLETED ✓"

  task_2_file_split:
    value:
      code_quality: 0.0
      maintainability: 0.9
      safety: 0.0
      effort_reduction: 0.5
      total: 0.42
    safety:
      breakage_risk: 0.5
      rollback_difficulty: 0.3
      test_coverage: 0.6
      total: 0.47
    effort:
      time: 0.8
      complexity: 0.6
      scope: 0.6
      total: 0.70
    priority: "(0.42 × 0.47) / 0.70 = 0.28"
    level: "P3"
    actual_outcome: "SKIPPED (risky, low priority)"

  task_3_add_tests:
    value:
      code_quality: 0.0
      maintainability: 0.3
      safety: 0.8
      effort_reduction: 0.2
      total: 0.38
    safety:
      breakage_risk: 1.0
      rollback_difficulty: 1.0
      test_coverage: 0.0
      total: 0.70
    effort:
      time: 0.4
      complexity: 0.3
      scope: 0.3
      total: 0.34
    priority: "(0.38 × 0.70) / 0.34 = 0.78"
    level: "P2"
    actual_outcome: "COMPLETED ✓"

  validation:
    tasks_completed: ["TASK-001 (P1)", "TASK-003 (P2)"]
    tasks_skipped: ["TASK-002 (P3)"]
    decision_alignment: "Matrix correctly predicted optimal task selection"
    convergence_achieved: true
    final_value: "0.804 (≥ 0.80 threshold)"

## Usage Guidelines

1. **Assess all tasks**: Before starting work, assess all candidate tasks
2. **Be honest**: Use actual estimates, not aspirational ones
3. **Document rationale**: Note why you scored each component
4. **Update after completion**: Compare actual vs. estimated to improve future assessments
5. **Use for planning**: Sort by priority, execute P1 tasks first
6. **Re-assess dynamically**: If situation changes, re-run assessment
7. **Learn from variance**: Track estimation accuracy over time

## Customization

Adjust weights based on project priorities:
- **Stability-focused**: Increase safety weights
- **Speed-focused**: Decrease effort weights
- **Quality-focused**: Increase value weights
- **Learning-focused**: Accept lower safety for educational tasks

## Integration with Pattern Selection

Use this matrix with Pattern 3 (Risk-Based Task Prioritization):
1. List all tasks
2. Assess each with this matrix
3. Calculate priorities
4. Select P1 tasks
5. Skip P3 tasks if time-constrained
6. Re-assess P2 tasks based on remaining budget

---

**Version**: 1.0
**Last Updated**: 2025-10-16
**Source**: bootstrap-004-refactoring-guide methodology
**Validation**: Tested on iteration 2 tasks (100% alignment)

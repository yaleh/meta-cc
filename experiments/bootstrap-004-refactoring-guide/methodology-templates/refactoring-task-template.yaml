# Refactoring Task Template
# Use this template to plan and track refactoring tasks

task:
  # Basic Information
  id: "TASK-001"
  title: "Extract helper functions from api.go"
  objective: "Reduce duplication by extracting common patterns into reusable helpers"

  # Pattern Selection
  pattern: "InputSchema Builder Extraction"
  pattern_reference: "REFACTORING-METHODOLOGY.md#pattern-2"

  # Risk Assessment
  risk_assessment:
    complexity: "LOW | MODERATE | HIGH"
    safety: "LOW | MODERATE | HIGH"
    impact_if_wrong: "LOW | MODERATE | HIGH"
    rollback_difficulty: "EASY | MODERATE | HARD"
    overall_risk: "LOW | MODERATE | HIGH"

  # Value Assessment
  value_assessment:
    code_quality_improvement: "0.0 - 1.0"
    maintainability_improvement: "0.0 - 1.0"
    test_coverage_improvement: "0.0 - 1.0"
    technical_debt_reduction: "0.0 - 1.0"
    estimated_ΔV: "0.00 - 0.10"

  # Effort Estimation
  effort_estimation:
    estimated_hours: "2-4 hours"
    estimated_lines_changed: "50-100 lines"
    estimated_files_affected: "1-3 files"
    estimated_tests_needed: "5-10 tests"

  # Priority Calculation
  priority:
    formula: "(value × safety) / effort"
    value_score: 0.8
    safety_score: 0.9
    effort_score: 0.3
    priority_score: 2.4
    priority_level: "P1 | P2 | P3"

  # Dependencies
  dependencies:
    prerequisites:
      - "All tests pass"
      - "No outstanding PRs affecting same files"
    blockers:
      - "None"
    related_tasks:
      - "TASK-002: Add validation tests"

  # Verification Steps
  verification_steps:
    pre_execution:
      - "[ ] Run full test suite (baseline)"
      - "[ ] Verify staticcheck passes"
      - "[ ] Check code coverage (baseline)"
      - "[ ] Verify no compilation errors"

    during_execution:
      - "[ ] Run tests after each helper extraction"
      - "[ ] Verify behavioral equivalence"
      - "[ ] Check for unintended side effects"

    post_execution:
      - "[ ] All tests pass"
      - "[ ] staticcheck passes"
      - "[ ] Code coverage maintained or improved"
      - "[ ] No compilation errors"
      - "[ ] Performance not degraded"
      - "[ ] Documentation updated"

  # Success Criteria
  success_criteria:
    quantitative:
      - "Line count reduced by ≥10%"
      - "Duplication reduced by ≥50%"
      - "Test coverage ≥ baseline"
      - "All tests pass"

    qualitative:
      - "Code is more readable"
      - "Patterns are reusable"
      - "API is easier to extend"
      - "Team agrees on improvement"

  # Rollback Plan
  rollback_plan:
    trigger_conditions:
      - "Tests fail after multiple fix attempts"
      - "Performance degradation >10%"
      - "Breaking changes discovered"

    rollback_steps:
      - "[ ] git revert <commit>"
      - "[ ] Verify tests pass"
      - "[ ] Document what went wrong"
      - "[ ] Re-plan with different approach"

  # Execution Log
  execution_log:
    started_at: "2025-10-16T10:00:00Z"
    completed_at: "2025-10-16T14:00:00Z"
    actual_duration: "4 hours"

    actual_changes:
      files_modified: ["cmd/mcp-server/tools.go"]
      lines_added: 50
      lines_removed: 125
      net_change: -75

    actual_value:
      ΔV_code_quality: 0.00
      ΔV_maintainability: 0.04
      ΔV_safety: 0.00
      ΔV_effort: 0.02
      ΔV_total: 0.034

    issues_encountered:
      - issue: "Three tools had custom Properties structure"
        resolution: "Left unchanged, documented as exception"

    lessons_learned:
      - "Helper pattern doesn't apply universally"
      - "Incremental refactoring safer than bulk changes"
      - "Test-after-each-change caught one regression early"

  # Status Tracking
  status: "TODO | IN_PROGRESS | COMPLETED | BLOCKED | SKIPPED"
  assigned_to: "developer-name"
  reviewed_by: "reviewer-name"
  approved_by: "approver-name"

# Notes
notes: |
  Use this template to:
  1. Plan refactoring tasks systematically
  2. Assess risk and priority objectively
  3. Track progress and outcomes
  4. Document lessons learned for future reference

  Customize fields as needed for your project.

{
  "skill": {
    "name": "subagent-prompt-construction",
    "description": "Systematic methodology for constructing compact, expressive, Claude Code-integrated subagent prompts using lambda-calculus and predicate logic syntax.",
    "domain": "Claude Code subagent development",
    "version": "1.0",
    "status": "validated",
    "experiment": "experiments/subagent-prompt-methodology",
    "validated_date": "2025-10-29"
  },
  "metrics": {
    "v_instance": {
      "achieved": 0.895,
      "target": 0.80,
      "status": "exceeds"
    },
    "v_meta": {
      "achieved": 0.709,
      "target": 0.75,
      "status": "near_convergence",
      "gap": 0.041
    },
    "compactness": {
      "lines_max": 150,
      "skill_md_lines": 61
    }
  },
  "artifacts": {
    "templates": {
      "count": 1,
      "files": [
        "templates/subagent-template.md"
      ]
    },
    "reference": {
      "count": 3,
      "files": [
        "reference/patterns.md",
        "reference/symbolic-language.md",
        "reference/integration-patterns.md"
      ]
    },
    "examples": {
      "count": 1,
      "files": [
        "examples/phase-planner-executor.md"
      ],
      "validated_examples": [
        {
          "name": "phase-planner-executor",
          "lines": 92,
          "functions": 7,
          "agents_used": 2,
          "mcp_tools_used": 2,
          "v_instance": 0.895,
          "pattern": "Orchestration"
        }
      ]
    },
    "scripts": {
      "count": 4,
      "files": [
        "scripts/count-artifacts.sh",
        "scripts/validate-skill.sh",
        "scripts/extract-patterns.py",
        "scripts/generate-frontmatter.py"
      ]
    },
    "inventory": {
      "count": 5,
      "files": [
        "inventory/inventory.json",
        "inventory/patterns-summary.json",
        "inventory/integration-patterns-summary.json",
        "inventory/skill-frontmatter.json",
        "inventory/skill-metrics.json"
      ]
    }
  },
  "patterns": {
    "construction_patterns": {
      "count": 3,
      "list": [
        {
          "name": "Pattern 1: Orchestration Agent",
          "status": "validated",
          "v_instance": 0.895
        },
        {
          "name": "Pattern 2: Analysis Agent",
          "status": "designed"
        },
        {
          "name": "Pattern 3: Enhancement Agent",
          "status": "designed"
        }
      ]
    },
    "integration_patterns": {
      "count": 4,
      "list": [
        "Pattern 1: Subagent Composition",
        "Pattern 2: MCP Tool Usage",
        "Pattern 3: Skill Reference",
        "Pattern 4: Resource Loading"
      ]
    }
  },
  "components": {
    "symbolic_language": {
      "logic_operators": ["∧", "∨", "¬", "→", "↔"],
      "quantifiers": ["∀", "∃", "∃!"],
      "set_operations": ["∈", "∉", "⊆", "⊇", "∪", "∩"],
      "comparisons": ["=", "==", "≠", "<", ">", "≤", "≥"],
      "special_symbols": ["|x|", "Δx", "x'", "x_n"]
    },
    "compactness_guidelines": {
      "simple": {
        "lines": "30-60",
        "functions": "3-5"
      },
      "moderate": {
        "lines": "60-120",
        "functions": "5-8"
      },
      "complex": {
        "lines": "120-150",
        "functions": "8-12"
      },
      "hard_limit": 150
    }
  },
  "validation": {
    "structure": "passed",
    "required_files": "complete",
    "automation": "functional",
    "quality_score": 0.85,
    "transferability": "95%+",
    "ready_for_production": true
  },
  "experiment_lineage": {
    "methodology": "BAIME (Bootstrapped AI Methodology Engineering)",
    "iterations": 2,
    "duration_hours": 4,
    "speedup_vs_manual": "3.25-4.5x",
    "convergence_status": "near_convergence",
    "gaps": [
      "Practical validation (effectiveness 0.70 → 0.85)",
      "Cross-domain testing (generality 0.50 → 0.70)"
    ]
  },
  "usage": {
    "target_audience": [
      "Claude Code subagent developers",
      "BAIME practitioners",
      "Methodology engineers"
    ],
    "prerequisites": [
      "Understanding of Claude Code features",
      "Basic lambda calculus knowledge",
      "Familiarity with predicate logic"
    ],
    "time_to_apply": "1-2 hours for simple agent, 2-4 hours for complex",
    "recommended_workflow": [
      "Read SKILL.md for overview",
      "Study templates/subagent-template.md",
      "Review examples/phase-planner-executor.md",
      "Select pattern from reference/patterns.md",
      "Apply integration patterns from reference/integration-patterns.md",
      "Validate with scripts/validate-skill.sh"
    ]
  }
}

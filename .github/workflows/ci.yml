name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.21', '1.22']
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for CHANGELOG validation

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Record test start time
        id: test_start
        shell: bash
        run: echo "TEST_START=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Verify plugin file sync
        shell: bash
        run: |
          bash scripts/sync-plugin-files.sh

          # Check sync succeeded (new structure uses dist/)
          if [ ! -d "dist/commands" ] || [ ! -d "dist/agents" ]; then
            echo "ERROR: Plugin file sync failed - dist/ directory not created"
            exit 1
          fi

          # Check file count (only unified meta.md, capabilities distributed separately)
          DIST_CMD_COUNT=$(find dist/commands -name "*.md" | wc -l)
          EXPECTED_COUNT=1

          if [ "$DIST_CMD_COUNT" -ne "$EXPECTED_COUNT" ]; then
            echo "ERROR: Command file count mismatch: expected $EXPECTED_COUNT (unified meta.md only), got $DIST_CMD_COUNT"
            exit 1
          fi

          echo "✓ Plugin files synced successfully ($DIST_CMD_COUNT command file: unified meta.md)"
          echo "  Note: 13 capability files distributed separately in capabilities-latest.tar.gz"

      - name: Check CHANGELOG updated
        if: github.event_name == 'pull_request'
        shell: bash
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: |
          bash scripts/check-changelog-updated.sh

      - name: Run tests
        run: make test

      - name: Generate coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.22'
        run: make test-coverage

      - name: Run linter
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.22'
        run: make lint

      - name: Upload coverage
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.22'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Check coverage threshold
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.22'
        shell: bash
        run: |
          echo "Checking test coverage threshold..."

          # Extract total coverage percentage
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')

          # Define threshold (lowered to 70% because -short mode skips integration tests)
          THRESHOLD=70.0

          echo "Current coverage: ${COVERAGE}%"
          echo "Required threshold: ${THRESHOLD}%"

          # Compare coverage to threshold
          if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
            echo "❌ ERROR: Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%"
            echo ""
            echo "Please add tests to increase coverage above ${THRESHOLD}%"
            echo ""
            echo "To check coverage locally:"
            echo "  make test-coverage"
            echo "  open coverage.html"
            exit 1
          else
            echo "✅ Coverage ${COVERAGE}% meets threshold ${THRESHOLD}%"
          fi

      - name: Calculate test duration
        if: always() && matrix.os == 'ubuntu-latest' && matrix.go == '1.22'
        shell: bash
        run: |
          START=${{ steps.test_start.outputs.TEST_START }}
          END=$(date +%s)
          DURATION=$((END - START))
          echo "⏱️  Test suite completed in ${DURATION} seconds"
          echo "TEST_DURATION=${DURATION}" >> $GITHUB_ENV

      - name: Track test duration metric
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.22'
        shell: bash
        run: |
          bash scripts/track-metrics.sh test_duration ${{ env.TEST_DURATION }} seconds

      - name: Check performance regression
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.22' && github.event_name == 'pull_request'
        shell: bash
        run: |
          # Check test duration regression (20% threshold)
          bash scripts/check-performance-regression.sh test_duration ${{ env.TEST_DURATION }} 20

      - name: Commit and push metrics
        if: matrix.os == 'ubuntu-latest' && matrix.go == '1.22' && github.event_name == 'push'
        shell: bash
        run: |
          # Configure git
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Check if metrics changed
          if ! git diff --quiet .ci-metrics/; then
            git add .ci-metrics/
            git commit -m "ci: update performance metrics [skip ci]"
            git push
          else
            echo "No metrics changes to commit"
          fi

  pipeline-tests:
    name: Pipeline Script Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for CHANGELOG validation

      - name: Install Bats
        run: |
          sudo apt-get update
          sudo apt-get install -y bats

      - name: Run Bats tests
        run: |
          bats tests/scripts/*.bats

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for CHANGELOG validation

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

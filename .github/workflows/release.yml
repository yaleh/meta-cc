name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'

      - name: Record build start time
        id: build_start
        run: echo "BUILD_START=$(date +%s)" >> $GITHUB_OUTPUT

      - name: Get version
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Verify plugin.json version matches tag
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          VERSION_NUM=${VERSION#v}
          PLUGIN_VERSION=$(jq -r '.version' .claude-plugin/plugin.json)

          if [ "$PLUGIN_VERSION" != "$VERSION_NUM" ]; then
            echo "❌ ERROR: Version mismatch!"
            echo "  Git tag: $VERSION ($VERSION_NUM)"
            echo "  plugin.json: $PLUGIN_VERSION"
            echo ""
            echo "This should not happen if you used scripts/release.sh"
            echo "Please ensure the release script updated version files correctly."
            exit 1
          fi
          echo "✓ Version verified: $VERSION_NUM"

      - name: Verify marketplace.json version matches tag
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          VERSION_NUM=${VERSION#v}
          MARKETPLACE_VERSION=$(jq -r '.plugins[0].version' .claude-plugin/marketplace.json)

          if [ "$MARKETPLACE_VERSION" != "$VERSION_NUM" ]; then
            echo "❌ ERROR: Version mismatch!"
            echo "  Git tag: $VERSION ($VERSION_NUM)"
            echo "  marketplace.json: $MARKETPLACE_VERSION"
            echo ""
            echo "This should not happen if you used scripts/release.sh"
            echo "Please ensure the release script updated version files correctly."
            exit 1
          fi
          echo "✓ Marketplace version verified: $VERSION_NUM"

      - name: Sync plugin files
        run: bash scripts/sync-plugin-files.sh

      - name: Build binaries
        run: |
          mkdir -p build

          # Set version info for ldflags
          VERSION=${{ steps.version.outputs.VERSION }}
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          LDFLAGS="-X github.com/yaleh/meta-cc/cmd.Version=${VERSION} -X github.com/yaleh/meta-cc/cmd.Commit=${COMMIT} -X github.com/yaleh/meta-cc/cmd.BuildTime=${BUILD_TIME}"

          # Linux amd64
          GOOS=linux GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-linux-amd64 .

          # Linux arm64
          GOOS=linux GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-linux-arm64 .

          # macOS amd64
          GOOS=darwin GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-darwin-amd64 .

          # macOS arm64
          GOOS=darwin GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-darwin-arm64 .

          # Windows amd64
          GOOS=windows GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-windows-amd64.exe .

          # MCP server binaries
          GOOS=linux GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-mcp-linux-amd64 ./cmd/mcp-server
          GOOS=linux GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-mcp-linux-arm64 ./cmd/mcp-server
          GOOS=darwin GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-mcp-darwin-amd64 ./cmd/mcp-server
          GOOS=darwin GOARCH=arm64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-mcp-darwin-arm64 ./cmd/mcp-server
          GOOS=windows GOARCH=amd64 go build -ldflags "${LDFLAGS}" -o build/meta-cc-mcp-windows-amd64.exe ./cmd/mcp-server

      - name: Package Capabilities
        run: |
          make bundle-capabilities
          echo "Capability package created: build/capabilities-latest.tar.gz"
          ls -lh build/capabilities-latest.tar.gz

      - name: Create plugin packages
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          mkdir -p build/packages

          for platform in linux-amd64 linux-arm64 darwin-amd64 darwin-arm64 windows-amd64; do
            PKG_DIR=build/packages/meta-cc-plugin-${platform}
            mkdir -p $PKG_DIR/bin $PKG_DIR/.claude-plugin $PKG_DIR/commands $PKG_DIR/agents $PKG_DIR/skills $PKG_DIR/lib

            # Copy binaries
            if [[ $platform == windows-* ]]; then
              cp build/meta-cc-${platform}.exe $PKG_DIR/bin/meta-cc.exe
              cp build/meta-cc-mcp-${platform}.exe $PKG_DIR/bin/meta-cc-mcp.exe
            else
              cp build/meta-cc-${platform} $PKG_DIR/bin/meta-cc
              cp build/meta-cc-mcp-${platform} $PKG_DIR/bin/meta-cc-mcp
            fi

            # Copy Claude Code plugin structure
            cp -r .claude-plugin/* $PKG_DIR/.claude-plugin/
            cp -r dist/commands/* $PKG_DIR/commands/
            cp -r dist/agents/* $PKG_DIR/agents/
            cp -r dist/skills/* $PKG_DIR/skills/
            cp -r lib/* $PKG_DIR/lib/

            # Copy scripts and metadata
            cp scripts/install.sh $PKG_DIR/
            cp scripts/uninstall.sh $PKG_DIR/
            cp README.md $PKG_DIR/
            cp LICENSE $PKG_DIR/

            # Create archive
            cd build/packages
            tar -czf meta-cc-plugin-${VERSION}-${platform}.tar.gz meta-cc-plugin-${platform}
            cd ../..
          done

      - name: Run smoke tests
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          PLATFORM=linux-amd64
          PACKAGE=build/packages/meta-cc-plugin-${VERSION}-${PLATFORM}.tar.gz

          echo "========================================="
          echo "Running smoke tests for release artifacts"
          echo "========================================="
          echo "Version:  $VERSION"
          echo "Platform: $PLATFORM"
          echo "Package:  $PACKAGE"
          echo ""

          bash scripts/smoke-tests.sh "$VERSION" "$PLATFORM" "$PACKAGE"

          if [ $? -ne 0 ]; then
            echo ""
            echo "❌ SMOKE TESTS FAILED"
            echo "Release has been blocked due to failed smoke tests."
            echo "Please review the errors above and fix the issues."
            exit 1
          fi

          echo ""
          echo "✓ Smoke tests passed - proceeding with release"

      - name: Calculate build duration
        run: |
          START=${{ steps.build_start.outputs.BUILD_START }}
          END=$(date +%s)
          DURATION=$((END - START))
          echo "⏱️  Build completed in ${DURATION} seconds"
          echo "BUILD_DURATION=${DURATION}" >> $GITHUB_ENV

      - name: Track build duration metric
        run: |
          bash scripts/track-metrics.sh build_duration ${{ env.BUILD_DURATION }} seconds

      - name: Generate checksums
        run: |
          cd build/packages
          sha256sum *.tar.gz > checksums.txt

      - name: Create version-agnostic symlinks
        run: |
          cd build/packages
          for platform in linux-amd64 linux-arm64 darwin-amd64 darwin-arm64 windows-amd64; do
            cp meta-cc-plugin-${{ steps.version.outputs.VERSION }}-${platform}.tar.gz meta-cc-plugin-${platform}.tar.gz
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/packages/*
            build/capabilities-latest.tar.gz
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          body: |
            ## Installation

            Download the appropriate package for your platform and run:

            ```bash
            tar -xzf meta-cc-plugin-${{ steps.version.outputs.VERSION }}-<platform>.tar.gz
            cd meta-cc-plugin-<platform>
            ./install.sh
            ```

            ### Platforms
            - `linux-amd64`: Linux x86_64
            - `linux-arm64`: Linux ARM64
            - `darwin-amd64`: macOS Intel
            - `darwin-arm64`: macOS Apple Silicon
            - `windows-amd64`: Windows x86_64

            See [Installation Guide](https://github.com/yaleh/meta-cc#installation) for detailed instructions and troubleshooting.

            ### Verification
            After installation, verify with:
            ```bash
            meta-cc --version
            ```
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release summary
        if: success()
        run: |
          echo "==================================="
          echo "Release ${{ steps.version.outputs.VERSION }} Summary"
          echo "==================================="
          echo ""
          echo "Build Metrics:"
          echo "  - Build duration: ${BUILD_DURATION}s"
          echo "  - Platforms built: 5 (linux-amd64, linux-arm64, darwin-amd64, darwin-arm64, windows-amd64)"
          echo "  - Binaries created: 10 (CLI + MCP × 5 platforms)"
          echo ""
          echo "Artifact Summary:"
          echo "  - Plugin packages: 5"
          echo "  - Capabilities package: 1"
          echo "  - Checksums: 1"
          echo "  - Total package size: $(du -sh build/packages | cut -f1)"
          echo ""
          echo "Quality Gates:"
          echo "  - Version verification: PASS ✓"
          echo "  - Smoke tests: PASS ✓ (25/25)"
          echo "  - Checksums: GENERATED ✓"
          echo ""
          echo "Release Status: SUCCESS ✓"
          echo "==================================="

      - name: Create job summary
        if: success()
        run: |
          echo "## Release ${{ steps.version.outputs.VERSION }} Complete ✓" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Build duration**: ${BUILD_DURATION}s" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: 5 (linux-amd64, linux-arm64, darwin-amd64, darwin-arm64, windows-amd64)" >> $GITHUB_STEP_SUMMARY
          echo "- **Binaries**: 10 (CLI + MCP server × 5 platforms)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Plugin packages**: 5 platform-specific packages" >> $GITHUB_STEP_SUMMARY
          echo "- **Capabilities**: 1 package (capabilities-latest.tar.gz)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total size**: $(du -sh build/packages | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Version verification (plugin.json, marketplace.json)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Smoke tests (25/25 passed)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Checksums generated (SHA256)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Distribution" >> $GITHUB_STEP_SUMMARY
          echo "- **GitHub Release**: Created with all artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Marketplace**: Available via `/plugin marketplace add yaleh/meta-cc`" >> $GITHUB_STEP_SUMMARY
